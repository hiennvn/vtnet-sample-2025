
--- SETUP ---

1. Create new mode: Product (You are the expert in IT area with very strong business mindset. You want to build a world-class product with perfect user experiences. You are good at writing the concise and detailed software requirement documents.)

2. Create new mode: Design (You are a UX/UI design expert, have deep knowledge about design mechanism, chase for perfect pixel design. Your design style is creative, use the latest design trend. You love the Fluent 2 Design of Microsoft)

3. Create rule: java-springboot.mdc (*.java): https://cursor.directory/java-spring-cursor-rules 

4. Create rule: technical-tutorials.mdc (manual): https://cursor.directory/technical-tutorials 

5. Create rule: react-typescript.mdc (manual): https://github.com/PatrickJS/awesome-cursorrules/blob/main/rules/react-typescript-nextjs-nodejs-cursorrules-prompt-/.cursorrules

6. Create rule core (always): https://forum.cursor.com/t/how-to-add-cline-memory-bank-feature-to-your-cursor/67868

7. Setup memory bank:
- Create memory-bank/
- Agent: initialize memory bank


--- BUILD REQUIREMENTS ---
1. Create 0.overview.md file 

2. AI Product / Gemini 2.5 Pro: I have an idea about the software system in @0.overview.md , you have a great management mindset, write me the product overview to 1.product.md file, includes: objectives, users, main usecases, main modules or sub-systems. You are open to add more content to this file for more detail. You are also open to ask me more questions if there is any unclear content. 

3. AI Product / Gemini 2.5 Pro: From Key Features, stated line 29 of @1.product.md , write detailed user stories to files. Group the user stories by feature to 2.userstories_[feature].md file. The user story must be ordered by priority, contains size, description, acceptance criterias

4. AI Design / Sonet-3.7: With the overview of the product in @1.product.md and all user stories in @2.1.userstories_project_management.md @2.2.userstories_document_handling.md @2.3.userstories_intelligent_search_chatbot.md , create a prototype to index.html in @/prototype 

5. AI Design / Sonet-3.7: With the overview of the product in @1.product.md and all user stories in @2.1.userstories_project_management.md @2.2.userstories_document_handling.md @2.3.userstories_intelligent_search_chatbot.md , the mockup in @index.html , generate other pages to @/prototype . Try to reuse as most shared components as possible


--- CODING ---
1. AI Agent / Sonet-3.7: @technical-tutorials.mdc 
I want to build the system with the requirements in @1.product.md @2.1.userstories_project_management.md @2.2.userstories_document_handling.md @2.3.userstories_intelligent_search_chatbot.md , the technologies are described in @3.techbase.md , write the architecture and details of applied technologies to 3.tech_structure.md file

2. AI Agent / Sonet-3.7: @technical-tutorials.mdc 
From @3.2.tech_structure.md , break down to the tasks as the checklist into 3.3.implement_checklist.md file

3. AI Agent / Sonet-3.7: update memory bank (update rules to Always)

REMOVE core.mdc to Manual

4. AI Agent / Sonet-3.7: Follow the checklist@3.3.implement_checklist.md , implement the backend in step 1.2. Project Scaffolding (line 14). Remember to update the checklist.

5. AI Agent / Sonet-3.7: Follow the checklist @3.3.implement_checklist.md , implement step "3.1. Project Setup" (line 67). Remember to update the checklist.

mysql -u root -p

6. AI Agent / Sonet-3.7: @technical-tutorials.mdc 
From the tech structure in @3.2.tech_structure.md , write the checklist to develop the user stories in @2.1.userstories_project_management.md to 4.checklist_us.2.1.md file. Write it as detail as possible for backend and frontend, the database is existing and must not be changed.

7. AI Agent / Sonet-3.7: @technical-tutorials.mdc 
Write the detail checklist to implement "US1.3: Create and Manage User Accounts" in @4.checklist_us.2.1.md to 4.checklist_us_2.1_detail.md

8. AI Agent / Sonet-3.7: Follow@4.checklist_us_2.1_detail.md, implement "1.1 Create User Entity" (line 9). Remember to update the checklist

9. AI Agent / Sonet-3.7: Follow@4.checklist_us_2.1_detail.md, implement 1.2, 1.3, 1.4, 1.5 (line 22 to 66). Remember to update the checklist

10. AI Agent / Sonet-3.7: Follow@4.checklist_us_2.1_detail.md, implement "2. User Repository" (line 68). Remember to update the checklist

11. AI Agent / Sonet-3.7: Follow@4.checklist_us_2.1_detail.md, implement "5. User Controller" (line 146). Remember to update the checklist

12. AI Agent / Sonet-3.7: @react-typescript.mdc 
Follow@4.checklist_us_2.1_detail.md, implement "1.1 Create User Interfaces" (line 212). Remember to update the checklist

13. AI Agent / Sonet-3.7: @react-typescript.mdc 
Follow @4.checklist_us_2.1_detail.md , implement 1.2, 1.3, 1.4 . Remember to update the checklist.

14. AI Agent / Sonet-3.7: @react-typescript.mdc 
From checklist @4.checklist_us_2.1_detail.md , implement "3. User Management Page" (line 280), use @user-management.html in @/prototype as the mockup. Remember to update the checklist


--- TDD ---
1. AI Agent / Sonet-3.7: @technical-tutorials.mdc 
From the user stories in @2.1.userstories_project_management.md , write the implementation checklist with detail steps to 4.checklist_us.2.1.2.md file.

Remember 2 things:
1. Use existing database schema in @V1__Initial_Schema.sql for new entity. I don't want to update the database schema.
2. Use Test Driven Development, so you need to create the code structure without detail implementation, write the unit test first, then implement the functions later

2. AI Agent / Sonet-3.7: @java-springboot.mdc 
Follow @4.checklist_us.2.1.2.md , implement the backend ("Backend Implementation" line 9). Remember to update the checklist.

docker-compose -f docker-compose.yml run --rm backend mvn test -Dtest=com.vtnet.pdms.interfaces.api.ProjectControllerTest

3. AI Agent / Sonet-3.7: @react-typescript.mdc 
@4.checklist_us.2.1.2.md Continue to implement the Frontend. Remember to update the checklist 

npm run test

4. AI Agent / Sonet-3.7: @technical-tutorials.mdc 
Use @4.checklist_us.2.1.2.md as the example, create the checklist to implement the user stories US1.1, US1.4, US1.5, US1.6, US1.7 in @2.1.userstories_project_management.md . Write the checklist to 4.checklist_us_2.1.3.md file. Remember to use existing database and code base.

5. AI Agent / Sonet-3.7: @4.checklist_us_2.1.3.md implement "US1.1: Create a New Project" (line 5). Remember to update the checklist

6. AI Agent / Sonet-3.7: Implement use story "US1.4: Manage Project Membership". Remember to use existing databse schema and codebase

7. AI Agent / Sonet-3.7: @technical-tutorials.mdc 
Use @4.checklist_us_2.1.3.md as the example, write the checklist to implement @2.2.userstories_document_handling.md to 4.checklist_us_2.2.md file. Remember to:

1. use existing codebase 
2. use existing database schema

8. AI Agent / Sonet-3.7: Use @4.checklist_us_2.2.md as the example, write the checklist to implement @2.3.userstories_intelligent_search_chatbot.md to 4.checklist_us_2.3.md file. Remember to:

1. use existing codebase
2. use existing database schema

9. I want to build a chat bot, that links to Documents tab. The general idea is:
1. When the document is created, the content is indexed
2. The Documents tab display as a chat to ask the content of the documents. User ask for the content in the chatbox like "What is the brief content of document xyz...?", the system use AI (OpenAI) APIs to "read" the existing xyz document and return the content.

Write the implementation checklist to 4.checklist_us_3.md file


--- TESTING ---

1. @2.1.userstories_project_management.md @2.2.userstories_document_handling.md @2.3.userstories_intelligent_search_chatbot.md base on the user stories, write the test cases to 5.testcases_[story_name].md files. Remember:

1. Create the common test cases like login etc
2. Use the common cases as the pre-condition in suitable cases

2. Analyze the UI here @/frontend and update the @/testcases to match with UI elements

