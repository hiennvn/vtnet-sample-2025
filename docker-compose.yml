version: '3.8'

services:
  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: vtnet-backend
    restart: unless-stopped
    depends_on:
      - mysql
      - elasticsearch
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/vtnet_document_management?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=vtnet
      - SPRING_DATASOURCE_PASSWORD=vtnet_password
      - SPRING_ELASTICSEARCH_REST_URIS=http://elasticsearch:9200
      - STORAGE_LOCATION=/workspace/app/uploads
      - JWT_SECRET=vtnet_secure_jwt_secret_key_2025
    volumes:
      - uploads-data:/workspace/app/uploads
      - ./backend/src:/workspace/app/src
      - ./backend/pom.xml:/workspace/app/pom.xml
      - backend-m2-repo:/root/.m2
    ports:
      - "8080:8080"
    networks:
      - vtnet-network

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    command:
      - /bin/sh
      - -c
      - |
        npm i
        npm run dev -- --host 0.0.0.0
    container_name: vtnet-frontend
    restart: unless-stopped
    depends_on:
      - backend
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/index.html:/app/index.html
      - ./frontend/vite.config.ts:/app/vite.config.ts
      - ./frontend/tsconfig.json:/app/tsconfig.json
      - ./frontend/tsconfig.node.json:/app/tsconfig.node.json
      - ./frontend/tsconfig.app.json:/app/tsconfig.app.json
      - ./frontend/package.json:/app/package.json
      - ./frontend/package-lock.json:/app/package-lock.json
      - frontend-node-modules:/app/node_modules
    ports:
      - "80:3000"
    networks:
      - vtnet-network

  # MySQL database
  mysql:
    image: mysql:8.0
    platform: linux/amd64
    container_name: vtnet-mysql
    restart: unless-stopped
    environment:
      - MYSQL_DATABASE=vtnet_document_management
      - MYSQL_USER=vtnet
      - MYSQL_PASSWORD=vtnet_password
      - MYSQL_ROOT_PASSWORD=root_password
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    networks:
      - vtnet-network

  # Elasticsearch service
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    platform: linux/amd64
    container_name: vtnet-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - vtnet-network

  # Vector database (Qdrant)
  qdrant:
    image: qdrant/qdrant:latest
    platform: linux/amd64
    container_name: vtnet-qdrant
    restart: unless-stopped
    volumes:
      - qdrant-data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    networks:
      - vtnet-network

  ai-api:
    build:
      context: ./ai
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    networks:
      - vtnet-network
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
    env_file: ./ai/.env
    volumes:
      - uploads-data:/workspace/app/uploads
    restart: unless-stopped
    deploy:
      replicas: ${API_REPLICAS:-1}
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  ai-embed:
    build:
      context: ./ai
      dockerfile: Dockerfile
    volumes:
      - uploads-data:/app/uploads
    command:
      - sh
      - -c
      - |
        /app/.venv/bin/python app/embed_document.py
    networks:
      - vtnet-network
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
    env_file: ./ai/.env
    restart: unless-stopped
    deploy:
      replicas: ${API_REPLICAS:-1}
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    networks:
      - vtnet-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    volumes:
      - ollama:/root/.ollama

volumes:
  mysql-data:
  elasticsearch-data:
  qdrant-data:
  backend-m2-repo:
  frontend-node-modules:
  uploads-data:
  ollama:

networks:
  vtnet-network:
    driver: bridge 
